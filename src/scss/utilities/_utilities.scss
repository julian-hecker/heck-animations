// TODO: Split into files

/* Duration */
@each $bkpt-label, $bkpt-value in $breakpoints {
  @media (min-width: #{$bkpt-value}) {
    @each $dur-label, $dur-value in $durations {
      .#{$namespace}duration-#{$dur-label}#{$bkpt-label},
      .#{$namespace}dur-#{$dur-label}#{$bkpt-label},
      .#{$namespace}duration-#{$dur-value}#{$bkpt-label},
      .#{$namespace}dur-#{$dur-value}#{$bkpt-label} {
        animation-duration: #{$dur-value}ms;
      }
    } 
  }
}

/* Timing Functions */
// Implement system that uses animation-direction value 
// To determine using in or out timing function
@each $timing-label, $timing-value in $timings {
  .#{$namespace}timing-#{$timing-label},
  .#{$namespace}#{$timing-label} {
    animation-timing-function: $timing-value;
  }
}

/* Delays */
@each $bkpt-label, $bkpt-value in $breakpoints {
  @media (min-width: #{$bkpt-value}) {
    @each $del-label, $del-value in $delays {
      .#{$namespace}delay-#{$del-label}#{$bkpt-label},
      .#{$namespace}del-#{$del-label}#{$bkpt-label},
      .#{$namespace}delay-#{$del-value}#{$bkpt-label},
      .#{$namespace}del-#{$del-value}#{$bkpt-label} {
        animation-duration: #{$del-value}ms;
      }
    } 
  }
}

/* Iteration Count */
.#{$namespace}iteration-infinite,
.#{$namespace}infinite {
  animation-iteration-count: infinite;
}

@for $i from 1 through 10 {
  .#{$namespace}iteration-#{$i},
  .#{$namespace}#{$i} {
    animation-iteration-count: $i;
  }
}

/* Animation Direction */
.#{$namespace}direction-out,
.#{$namespace}out {
  animation-direction: alternate-reverse;
}

.#{$namespace}direction-in,
.#{$namespace}in {
  animation-direction: alternate;
}

/* Animation Play State */
.#{$namespace}paused {
  animation-play-state: paused;
}
.#{$namespace}running {
  animation-play-state: running;
}

/* Animations Off: Responsive */
// TODO: Replace with animation-duration: 0;
// Refactor complicated loops
@for $i from 1 through length($breakpoints) {
  $bkpt-label: nth(nth($breakpoints, $i), 1);
  $bkpt-value: nth(nth($breakpoints, $i), 2);
  @media (min-width: $bkpt-value) {
    .#{$namespace}off#{$bkpt-label}-up {
      animation: none !important;
    }
  }
}

@for $i from length($breakpoints) through 2 {
  $bkpt-label: nth(nth($breakpoints, $i), 1);
  $bkpt-value: nth(nth($breakpoints, $i), 2);
  @media (max-width: $bkpt-value) {
    .#{$namespace}off#{$bkpt-label}-down {
      animation: none !important;
    }
  }
}

// /* Support Query */
// Browser support is extensive, this not required.
// @supports not (animation-fill-mode: both) {
//   .#{$namespace}animate {
//     animation: none !important;
//   }
// }

/* Media Query for Reduced Motion and Print */
@media (prefers-reduced-motion: reduce), (print) {
  .#{$namespace}animate {
    animation: none !important;
  }
}

